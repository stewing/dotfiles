/* Copyright (C) 2014-2018 by Jacob Alexander
 *
 * This file is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this file.  If not, see <http://www.gnu.org/licenses/>.
 */

// This file was generated by the kll compiler, DO NOT EDIT.
// Generation Date:    2018-02-24
// KLL Emitter:        kiibohd
// KLL Version:        BETA 0.5c.ebbaeebdbec670071bbf84b1533ee7f98163ec1f - 2018-02-13 23:18:31 -0800
// KLL Git Changes:    None
// Compiler arguments:
//      /srv/KiiConf/controller/kll/kll
//    --kiibohd-debug
//    --config
//      /srv/KiiConf/controller/Scan/Devices/ISSILed/capabilities.kll
//      /srv/KiiConf/controller/Scan/Devices/MatrixARMPeriodic/capabilities.kll
//      /srv/KiiConf/controller/Macro/PartialMap/capabilities.kll
//      /srv/KiiConf/controller/Macro/PixelMap/capabilities.kll
//      /srv/KiiConf/controller/Output/HID-IO/capabilities.kll
//      /srv/KiiConf/controller/Output/USB/capabilities.kll
//      /srv/KiiConf/controller/Debug/latency/capabilities.kll
//    --base
//      /srv/KiiConf/controller/Scan/Infinity_60_LED/scancode_map.kll
//      /srv/KiiConf/controller/Scan/Infinity_60_LED/scancode_map.kll
//    --default
//      /srv/KiiConf/controller/kll/layouts/stdFuncMap.kll
//      MD1.1-Standard-1.kll
//    --partial
//      /srv/KiiConf/controller/kll/layouts/stdFuncMap.kll
//      MD1.1-Standard-2.kll
//    --emitter
//      kiibohd
//    --def-template
//      /srv/KiiConf/controller/kll/templates/kiibohdDefs.h
//    --map-template
//      /srv/KiiConf/controller/kll/templates/kiibohdKeymap.h
//    --pixel-template
//      /srv/KiiConf/controller/kll/templates/kiibohdPixelmap.c
//    --def-output
//      kll_defs.h
//    --map-output
//      generatedKeymap.h
//    --pixel-output
//      generatedPixelmap.c
//    --preprocessor-tmp-path
//      /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll
//
// - Configuration File -
//    ISSILedCapabilities
//      /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/_srv_KiiConf_controller_Scan_Devices_ISSILed@['capabilities']_processed.kll
//    MatrixARMPeriodicCapabilities
//      /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/_srv_KiiConf_controller_Scan_Devices_MatrixARMPeriodic@['capabilities']_processed.kll
//    PartialMapCapabilities
//      /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/_srv_KiiConf_controller_Macro_PartialMap@['capabilities']_processed.kll
//    PixelMapCapabilities
//      /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/_srv_KiiConf_controller_Macro_PixelMap@['capabilities']_processed.kll
//    HID-IOCapabilities
//      /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/_srv_KiiConf_controller_Output_HID-IO@['capabilities']_processed.kll
//    USBCapabilities
//      /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/_srv_KiiConf_controller_Output_USB@['capabilities']_processed.kll
//    latency
//      /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/_srv_KiiConf_controller_Debug_latency@['capabilities']_processed.kll
// - Generic Files -
// - Base Layer -
//    Infinity 60% LED
//      /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/_srv_KiiConf_controller_Scan_Infinity_60_LED@['scancode_map']_processed.kll
//    Infinity 60% LED
//      /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/_srv_KiiConf_controller_Scan_Infinity_60_LED@['scancode_map']_processed.kll
// - Default Layer -
//    stdFuncMap
//      /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/_srv_KiiConf_controller_kll_layouts@['stdFuncMap']_processed.kll
//    MD1.1
//      /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/@['MD1', '1-Standard-1']_processed.kll
// - Partial Layers -
//    Layer 1
//     stdFuncMap
//       /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/_srv_KiiConf_controller_kll_layouts@['stdFuncMap']_processed.kll
//     MD1.1
//       /srv/KiiConf/tmp/077ce062bbbf8c1be21186ffa33ba0b315a90d4229e441/tmp_kll/@['MD1', '1-Standard-2']_processed.kll



#pragma once

// ----- Includes -----

// KLL Include
#include <kll.h>



// ----- Capabilities -----

// Capability function declarations
void LED_control_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_layerLatch_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_layerLock_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_layerRotate_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_layerShift_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_layerState_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_testThreadSafe( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Macro_testThreadUnsafe( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_consCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_flashMode_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_kbdProtocolBoot_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_kbdProtocolNKRO_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_noneSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_sysCtrlSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_toggleKbdProtocol_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_usbCodeSend_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Output_usbMouse_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Pixel_AnimationControl_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Pixel_AnimationIndex_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Pixel_Animation_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );
void Pixel_Pixel_capability( TriggerMacro *trigger, uint8_t state, uint8_t stateType, uint8_t *args );



// Indexed Capabilities Table
const Capability CapabilitiesList[] = {
	/* 0 ledControl */
	{ LED_control_capability, 2, CapabilityFeature_None },
	/* 1 layerLatch */
	{ Macro_layerLatch_capability, 2, CapabilityFeature_Safe },
	/* 2 layerLock */
	{ Macro_layerLock_capability, 2, CapabilityFeature_Safe },
	/* 3 layerRotate */
	{ Macro_layerRotate_capability, 1, CapabilityFeature_Safe },
	/* 4 layerShift */
	{ Macro_layerShift_capability, 2, CapabilityFeature_Safe },
	/* 5 layerState */
	{ Macro_layerState_capability, 3, CapabilityFeature_Safe },
	/* 6 testThreadSafe */
	{ Macro_testThreadSafe, 0, CapabilityFeature_Safe },
	/* 7 testThreadUnsafe */
	{ Macro_testThreadUnsafe, 0, CapabilityFeature_None },
	/* 8 consCtrlOut */
	{ Output_consCtrlSend_capability, 2, CapabilityFeature_Safe },
	/* 9 flashMode */
	{ Output_flashMode_capability, 0, CapabilityFeature_Safe },
	/* 10 kbdProtocolBoot */
	{ Output_kbdProtocolBoot_capability, 0, CapabilityFeature_None },
	/* 11 kbdProtocolNKRO */
	{ Output_kbdProtocolNKRO_capability, 0, CapabilityFeature_None },
	/* 12 noneOut */
	{ Output_noneSend_capability, 0, CapabilityFeature_Safe },
	/* 13 sysCtrlOut */
	{ Output_sysCtrlSend_capability, 1, CapabilityFeature_Safe },
	/* 14 toggleKbdProtocol */
	{ Output_toggleKbdProtocol_capability, 0, CapabilityFeature_None },
	/* 15 usbKeyOut */
	{ Output_usbCodeSend_capability, 1, CapabilityFeature_Safe },
	/* 16 mouseOut */
	{ Output_usbMouse_capability, 6, CapabilityFeature_Safe },
	/* 17 animation_control */
	{ Pixel_AnimationControl_capability, 1, CapabilityFeature_None },
	/* 18 animationIndex */
	{ Pixel_AnimationIndex_capability, 2, CapabilityFeature_None },
	/* 19 animation */
	{ Pixel_Animation_capability, 7, CapabilityFeature_None },
	/* 20 pixel */
	{ Pixel_Pixel_capability, 0, CapabilityFeature_None },
};


// -- Result Macros

// Result Macro Guides



// -- Result Macro List

// Indexed Table of Result Macros
const ResultMacro ResultMacroList[] = {
};


// -- Trigger Macro Record

// Keeps a record/state of each result macro
ResultMacroRecord ResultMacroRecordList[ ResultMacroNum ];


// -- Trigger Macros

// Trigger Macro Guides



// -- Trigger Macro List

// Indexed Table of Trigger Macros
const TriggerMacro TriggerMacroList[] = {
};


// -- Trigger Macro Record List

// Keeps a record/state of each trigger macro
TriggerMacroRecord TriggerMacroRecordList[ TriggerMacroNum ];



// ----- Trigger Maps -----

// MaxScanCode
// - This is retrieved from the KLL configuration
// - Should be corollated with the max scan code in the scan module
// - Maximum value is 0x100 (0x0 to 0xFF)
// - Increasing it beyond the keyboard's capabilities is just a waste of ram...
#define MaxScanCode 0x0

// -- Trigger Lists
//
// Index 0: # of triggers in list
// Index n: pointer to trigger macro - use tm() macro

// - Default Layer -
Define_TL( default, 0x00 ) = { 0 };


// - Partial Layers -
// Partial Layer 1
Define_TL( layer1, 0x00 ) = { 0 };


// -- ScanCode Offset Map
// Maps interconnect ids to scancode offsets
//
// Only used for keyboards with an interconnect
const uint8_t InterconnectOffsetList[] = {
	0x00,
	0x00,
};


// -- ScanCode Indexed Maps
// Maps to a trigger list of macro pointers
//                 _
// <scan code> -> |T|
//                |r| -> <trigger macro pointer 1>
//                |i|
//                |g| -> <trigger macro pointer 2>
//                |g|
//                |e| -> <trigger macro pointer 3>
//                |r|
//                |s| -> <trigger macro pointer n>
//                 -

// - Default Map for ScanCode Lookup -
const nat_ptr_t *default_scanMap[] = { 
default_tl_0x00
};


// - Partial Layer ScanCode Lookup Maps -
// Partial Layer 1
const nat_ptr_t *layer1_scanMap[] = { 
layer1_tl_0x00
};



// ----- Layer Index -----

// -- Layer Index List
//
// Index 0: Default map
// Index n: Additional layers
const Layer LayerIndex[] = {
	Layer_IN( default_scanMap, "D: _srv_KiiConf_controller_Scan_Devices_ISSILed@['capabilities']_processed.kll + _srv_KiiConf_controller_Scan_Devices_MatrixARMPeriodic@['capabilities']_processed.kll + _srv_KiiConf_controller_Macro_PartialMap@['capabilities']_processed.kll + _srv_KiiConf_controller_Macro_PixelMap@['capabilities']_processed.kll + _srv_KiiConf_controller_Output_HID-IO@['capabilities']_processed.kll + _srv_KiiConf_controller_Output_USB@['capabilities']_processed.kll + _srv_KiiConf_controller_Debug_latency@['capabilities']_processed.kll + _srv_KiiConf_controller_Scan_Infinity_60_LED@['scancode_map']_processed.kll + _srv_KiiConf_controller_Scan_Infinity_60_LED@['scancode_map']_processed.kll + _srv_KiiConf_controller_kll_layouts@['stdFuncMap']_processed.kll + @['MD1', '1-Standard-1']_processed.kll", 0x00 ),
	Layer_IN( layer1_scanMap, "1: _srv_KiiConf_controller_Scan_Devices_ISSILed@['capabilities']_processed.kll + _srv_KiiConf_controller_Scan_Devices_MatrixARMPeriodic@['capabilities']_processed.kll + _srv_KiiConf_controller_Macro_PartialMap@['capabilities']_processed.kll + _srv_KiiConf_controller_Macro_PixelMap@['capabilities']_processed.kll + _srv_KiiConf_controller_Output_HID-IO@['capabilities']_processed.kll + _srv_KiiConf_controller_Output_USB@['capabilities']_processed.kll + _srv_KiiConf_controller_Debug_latency@['capabilities']_processed.kll + _srv_KiiConf_controller_Scan_Infinity_60_LED@['scancode_map']_processed.kll + _srv_KiiConf_controller_Scan_Infinity_60_LED@['scancode_map']_processed.kll + _srv_KiiConf_controller_kll_layouts@['stdFuncMap']_processed.kll + @['MD1', '1-Standard-2']_processed.kll", 0x00 ),
};


// - Layer State
LayerStateType LayerState[ LayerNum ];



// ----- Key Positions -----

// -- Physical Key Positions
//
// Index 0: Key 1
// Each key has 6 dimensions
// x,y,z and rx,ry,rz (rotation)
// Units are in mm
const Position Key_Positions[] = {
};

